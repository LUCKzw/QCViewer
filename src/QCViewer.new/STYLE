0. Definitions
====================

1. Formatting
====================
  1. All lines will be maximum 80 characters.
     Rationale: While terminals are no longer restricted to 80 columns,
                longer lines of text are harder to read with human eyes.
  2. The font will be fixed width.
     Rationale: This rule along with others is to enforce consistent
                alignment of code on different systems.
  2. Indentation will be with tabs.
  3. Code will be aligned assuming a tab width of 2.
  4. The brace style will be "The One True Brace Style" (1TBS) variant of K&R.
     That is, the opening brace shall be on the same line as the control
     statement for which it belongs to. The exception is for functions: the
     opening brace for these will be on a new line. This implies that the
     proper formatting for an if statement will be:

     if (cond) {
       ....
     } else {
       ....
     }
  4. It is acceptable to omit the braces for one line conditionals.
  5. It is acceptable to compress a block of code onto one line if it
     increases readability.
  6. Identifiers will, as a minimum (see 2.2) have their words in lowercase
     seperated by underscores. e.g. int this_is_an_integer.
  7. Ideally, high precedence binary operators will have their arguments close,
     low precedence operators will have their operators a space apart.
     e.g. a + b*c;

2. Data Structures
====================
  1. The ``struct'' keyword will be preferred over ``class''.
     Rationale: There is no benefits to either, but one must be chosen for
                consistency. The object oriented programming fad is
                embarassing, so ``struct'' will be used.
  2. The name of a data structure will end in "_t". e.g. struct foo_thing_t.
  3. A piece of data will be private and have accessor/getter functions under
     the following conditions:
       1. It is correlated with another piece of data, so that changing it
          (or, rarely, getting useful information from it) would require
          changing (or reading) different data.
       2. Changing it requires more work than an assignment operation.
       3. The implementation of the data and how it is stored/read may
          change in the future.
      Otherwise, the data will be made public.
      Rationale: The over proliferation of accessors/getters wastes everybody's
                 time.

3. Functions
====================
  1. TODO: function comments

4. Building
====================
  1. The set of warnings used shall be large. This should be fleshed out, but
     it will include things such as implicit casts.
  2. Warnings are to be treated as errors. This does not need to be enforced
     through the compiler.
     Rationale: When a warning is legitimate this is obvious. If a warning is
                spurious, then why is your code so hard for the analyzer to
                understand? It's probably worse for a human, so code should
                change in the name of readability.
  3. The more static analysis the better. The use of the static analysis will
     be analogous to 4.2

5. Testing
====================
  

6. Misc
====================
  1. TODO comments
  2. Implicit casts from floating point to integer will be avoided.
     Rationale: While their may be some convenience, this is a needless source
                of errors.
  3. When using operations which are not +,-,*,/ explicit bracketing should be
     used.
     Rationale: while it is possible to memorize the order of operations for
                C++ operators this can be a nasty source of bugs and also
                reduces code readability.
  4. 
